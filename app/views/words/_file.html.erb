<!-- TODO:yokohama
アップロード時にファイルをUTF-8にコンバートする（テストやってない）
アップロード時にプログレスバーを表示する
バリデーションを実装する
ライブラリにアップロードしようとしている場合は、データが全て上書きされると注意をだす。
ライブラリにアップロードの場合は、モデルの関係等、サーバー側のロジックを見直す。
アップロードしたときに、ブックとワードの関係レコードが削除されていない。
アップロード完了時に、ブックのレコード（表示）を更新する。
アップロード完了報告のアラートを表示する。
-->
<h3>CSV一括登録</h3>
<div id="dropbox" class="hero-unit">
  <p class="message">ここにCSVをドロップ</p>
</div>

<script>
function FileUpload(elm_id){
  var LOADED_FILE = []; //upload対象のfile一覧
  var LIMIT_IMG_W = 200; //画像fileはthumb nail表示しますが、
  var LIMIT_IMG_H = 200; //その際の最大表示サイズ
  var UPLOAD_URL = '/samples/file';
  var TEXT_ENCODING = 'UTF-8';
    
  //初期化
  this.init = function(elm_id){
    if( $("#" + elm_id).size() == 0 ){
      alert("can't find drop to element id : " + elm_id);
      return;
    }
    LOADED_FILE = [];
        
    //drop eventをセット.
    //※jquery.bindを使用すると、drop eventからdataTransferを取得不可。
    var this_obj = this;
    document.getElementById(elm_id).addEventListener('drop',
      function(e){this_obj.do_drop_file(e);},false);
      //default event & bubblingを中止
      $("#" + elm_id).bind('dragenter', function(e){e.preventDefault(); e.stopPropagation();})
        .bind('dragover', function(e){e.preventDefault(); e.stopPropagation();});
      $("html").bind('drop', function(e){e.preventDefault(); e.stopPropagation();})
        .bind('dragenter', function(e){e.preventDefault(); e.stopPropagation();})
        .bind('dragover', function(e){e.preventDefault(); e.stopPropagation();});
    };

    //fileがdropされると、呼ばれる
    this.do_drop_file = function(e){
      var file = e.dataTransfer.files[0];
      console.log("hgoehgoheogheo2");

      var reader = new FileReader();
      reader.onloadend = function(e) {
        LOADED_FILE.push(e.target.result);
        fup.upload_file();
      };

      if (file.size ==0) return;
      //reader.readAsDataURL(file);  //base 64でload
      reader.readAsText(file, "UIF-8");
    };

    this.validation = function(){
          /* TODO:validationのエラー表示用にこの表示ロジックは使う。
          $('#files_info').append($("<div class='file_info'>") );
          //filenameやtype, sizeの表示
          var file_info = "<span class='file_title'>" +files[i].name+"</span>" + ' ( '+ files[i].type+' '+files[i].size+'byte)<br>';
          $('#files_info>div:last').append(file_info);
          //thumb nailやtext内容の表示
          if ( this.can_disp_image_file(files[i].type) ){
            $('#files_info>div:last').append("<img>");
            this.make_image_element(files[i], $('#files_info>div:last img'));
          } else if ( this.can_disp_text_file(files[i].type) ){
            $('#files_info>div:last').append("<textarea cols='80' rows='10'></textarea>");
            this.make_text_element(files[i], $('#files_info>div:last textarea'));
          }
          */
          return true;
    };

    //thumb nail表示用のelement
    /*
    this.make_image_element = function(file,img){
      var reader = new FileReader();

      reader.onload = function(e) {
        //html5では、srcにbase64な値を登録できるらしい
        img.attr('src',e.target.result);
        if( img.attr('width') >= LIMIT_IMG_W ){
          img.attr('width',LIMIT_IMG_W);
        }
        if ( img.attr('height') >= LIMIT_IMG_H ){
          img.attr('height',LIMIT_IMG_H);
        }
      };
      reader.readAsDataURL(file);  //base 64形式でload
      return img;
    };
    */

    /* TODO:validation表示用のロジックとして使う。
    this.make_text_element = function(file,textarea){
      var reader = new FileReader();
      reader.onload = function(e) { $(textarea).html(e.target.result); };
      reader.readAsText(file,TEXT_ENCODING); //text形式でload
    };
    */

    //表示可能な画像fileの判定
    /*
    this.can_disp_image_file = function(file_type){
      if (file_type == 'image/png' || file_type == 'image/jpeg' ){
        return true;
      }
      return false;
    };
    */

    //表示可能な画像fileの判定
    this.can_disp_text_file = function(file_type){
      if (file_type == 'text/plain' || file_type == 'text/csv' ){
        return true;
      }
      return false;
    };

    //※html5では、FormDataというクラスが追加されたようですが
    //  firefox3.6では利用できないようなので、jquery.param()で送信.
    this.upload_file = function(){
      if (LOADED_FILE.length ==0) return;
      var data = new Object();
      data.file = LOADED_FILE;
      data.book_id = <%= @book.id %>;

      var this_obj = this;
      $.post(UPLOAD_URL, $.param(data,true), function(data,textStatus){ this_obj.post_upload_file(data, textStatus); });
    };

    this.post_upload_file = function(data,textStatus){ 
      alert('UPLOAD完了'); 
    };
    
    //初期化実行
    this.init(elm_id);
};

var fup = new FileUpload('dropbox');
</script>
